class Solution {
    public int recur(int i , int j , int[][] grid , int[][] dp){
        if(i == 0 && j == 0)
            return grid[i][j];

        if(dp[i][j] != -1)
           return dp[i][j];

        int up = (i > 0 ) ? grid[i][j] + recur(i - 1 , j , grid , dp) : Integer.MAX_VALUE;
        int left = (j > 0 ) ? grid[i][j] + recur(i , j - 1 , grid , dp) : Integer.MAX_VALUE;

        return dp[i][j] = Math.min(up , left);
    }
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int dp[][] = new int[m][n];
        for(int arr[] : dp)
           Arrays.fill(arr , -1);
        return recur(m - 1 , n - 1 , grid , dp);
    }
}
